version: '3.3'

# Info : Both native PHP Storm on Windows and PHP Storm with remove development (WSL) is supported. See comments below
# extra_hosts section for config hints.

# If you want to debug integration tests which creates container cache in /tmp, you also need to include ssh.yml
# as that will also mount /tmp inside the container. You also need to map /tmp in Settings -> PHP -> Servers -> Path Mappings.

# How to install:
# - start containers
# - add the following in .env:
# XDEBUG_PORT=9003
# - in phpstorm:
#    Settings -> PHP -> Debug
#    - Set Debug port to same port as specified in .env
#    - Enable "Can accept external connections"
# - Run ./external/ezp-toolkit/xdebug/prepare_container_for_xdebug.sh

#  - Add following temporary to doc/nginx/ez_params.d/ez_rewrite_params, before "if" clause with 404:
#    # PHP Storm Validate debugger configuration
#    rewrite "^/phpstorm_debug.php" "/phpstorm_debug.php" break;
#    rewrite "^/phpstorm_index.php" "/phpstorm_index.php" break;
#
#    location ~ \.php$ {
#        include ez_params.d/ez_fastcgi_params;
#
#        # FPM socket
#        # Possible values : unix:/var/run/php5-fpm.sock or 127.0.0.1:9000
#        fastcgi_pass app:9000;
#     }
# - Restart web container: docker-compose stop web; docker-compose up -d
# - in phpstorm:
#    - Validate debugger configuration on the Web Server
#      - Debug Validation Script
#      - Run the command provided in "Download script command" inside public/ inside container
#      - Url to validation script: http://127.0.0.1:8080/
#      - Click "Validate" button and make sure it succeeds
#      - Once that is successfull, complete step #2 - #4 in Settings -> PHP -> Debug
#    - Also, enable "Can accept external connections
#    - If you are not able to make the "Validate" operation successfully, try to telnet to PHP storm on port 9003 from the app container
#    -   You find the IP in .env (XDEBUG_PORT), example: telnet 172.24.96.1 9003
#    - You might need to restart PHP Storm and/or computer it order to make it work
#    - Once validation is working you should have a "default" server defined in Settings -> PHP -> Servers
#      - set "Absolute path on the server" for the project to "/var/www"
#      - You may (or may not) nee  to set mapping in vendor/ or src/ as well if setting break points there
# - Every time you reboot your computer you need to rerun script as IPs on docker networks might have changed:
#   ./external/ezp-toolkit/xdebug/prepare_container_for_xdebug.sh
#   This script supports the following parameters:
#     no options: enable xdebug (install first if not already installed)
#     --disable: disable xdebug and restarts app container
#     --force: forces a reinstall of xdebug even if it seems to be already installed
#
# When running xdebug session for tests, set the following environment variables:
#  export XDEBUG_MODE=debug XDEBUG_SESSION=1 PHP_IDE_CONFIG="serverName=localhost"
# See https://www.jetbrains.com/help/phpstorm/2025.2/debugging-a-php-cli-script.html?php.debugging.cli_script&keymap=Windows#-wux1l7_127
# (Value of serverName is the name of Settings -> PHP -> Servers -> Name)


services:
  app:
#    image: ${PHP_IMAGE}-dev
    environment:
      - XDEBUG_PORT=${XDEBUG_PORT-9003}
#     - PHP_INI_ENV_xdebug__remote_host=dockerhost
#     - PHP_INI_ENV_xdebug__remote_port=9003
    extra_hosts:
      # If running PHPStorm on Windows and php inside WSL. Then PHP inside WSL needs to be able to reach your PHPStorm
      # running on windows.
      # Find IP of Windows host from within Linux VM(WSL) using : route -n | grep -m 1 "UG" | awk '{print $2}'
      # (this is done automatically by prepare_container_for_xdebug.sh)
      # Then set host.docker.internal to resolve to that IP. This is done in external/ezp-toolkit/ezplatform/xdebug-reachwindowshost.yml
      # On such setup, include that yml file too, which will override this setting.

      # If running PHPStorm on Windows with "Remote development" to WSL, then PHP inside WSL needs to be able to reach your PHPStorm
      # agent running inside WSL. In other words, PHP inside the container needs to reach the docker host.
      # In this config, the DOCKERHOST variable defined in .env is really not used( only host.docker.internal instead)
      - "host.docker.internal:host-gateway"

    volumes:
        # /tmp used for xdebugging integrations tests
        # After starting container, run "sudo chmod a+t external/tmp; sudo chmod a+w external/tmp/"
        - ${COMPOSE_DIR}/../../external/tmp:/tmp
